// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Data_Id$Coronate from "./Data_Id.bs.js";

function toString(data) {
  switch (data) {
    case /* Person */0 :
        return "person";
    case /* Dummy */1 :
        return "dummy";
    case /* Missing */2 :
        return "missing";
    
  }
}

function fromString(str) {
  switch (str) {
    case "dummy" :
        return /* Dummy */1;
    case "missing" :
        return /* Missing */2;
    case "person" :
        return /* Person */0;
    default:
      return /* Person */0;
  }
}

var encode = toString;

function decode(data) {
  return fromString(Belt_Option.getExn(Js_json.decodeString(data)));
}

var Type = {
  toString: toString,
  fromString: fromString,
  encode: encode,
  decode: decode
};

function fromInt(x) {
  if (x < 0) {
    return 0;
  } else {
    return x;
  }
}

function toInt(x) {
  return x;
}

function toString$1(prim) {
  return String(prim);
}

function succ(x) {
  if (x < 0) {
    return 0;
  } else {
    return x + 1 | 0;
  }
}

function pred(x) {
  if (x < 1) {
    return 0;
  } else {
    return x - 1 | 0;
  }
}

var NatInt = {
  fromInt: fromInt,
  toInt: toInt,
  toString: toString$1,
  succ: succ,
  pred: pred
};

function fullName(t) {
  return t.firstName + " " + t.lastName;
}

function compareName(a, b) {
  var i = Caml.string_compare(a.firstName, b.firstName);
  if (i !== 0) {
    return i;
  } else {
    return Caml.string_compare(a.lastName, b.lastName);
  }
}

function succMatchCount(t) {
  return {
          firstName: t.firstName,
          id: t.id,
          lastName: t.lastName,
          matchCount: succ(t.matchCount),
          rating: t.rating,
          type_: t.type_
        };
}

function predMatchCount(t) {
  return {
          firstName: t.firstName,
          id: t.id,
          lastName: t.lastName,
          matchCount: pred(t.matchCount),
          rating: t.rating,
          type_: t.type_
        };
}

function setRating(t, rating) {
  return {
          firstName: t.firstName,
          id: t.id,
          lastName: t.lastName,
          matchCount: t.matchCount,
          rating: rating,
          type_: t.type_
        };
}

function decode$1(json) {
  var d = Js_json.decodeObject(json);
  var data = Belt_Option.getExn(Belt_Option.flatMap(d, (function (d) {
              return Js_dict.get(d, "type_");
            })));
  return {
          firstName: Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(d, (function (d) {
                          return Js_dict.get(d, "firstName");
                        })), Js_json.decodeString)),
          id: Data_Id$Coronate.decode(Belt_Option.getExn(Belt_Option.flatMap(d, (function (d) {
                          return Js_dict.get(d, "id");
                        })))),
          lastName: Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(d, (function (d) {
                          return Js_dict.get(d, "lastName");
                        })), Js_json.decodeString)),
          matchCount: Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(d, (function (d) {
                          return Js_dict.get(d, "matchCount");
                        })), Js_json.decodeNumber)) | 0,
          rating: Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(d, (function (d) {
                          return Js_dict.get(d, "rating");
                        })), Js_json.decodeNumber)) | 0,
          type_: fromString(Belt_Option.getExn(Js_json.decodeString(data)))
        };
}

function encode$1(data) {
  return Js_dict.fromArray([
              [
                "firstName",
                data.firstName
              ],
              [
                "id",
                Data_Id$Coronate.encode(data.id)
              ],
              [
                "lastName",
                data.lastName
              ],
              [
                "matchCount",
                data.matchCount
              ],
              [
                "rating",
                data.rating
              ],
              [
                "type_",
                toString(data.type_)
              ]
            ]);
}

var dummy = {
  firstName: "[Bye]",
  id: Data_Id$Coronate.dummy,
  lastName: "",
  matchCount: 0,
  rating: 0,
  type_: /* Dummy */1
};

function makeMissing(id) {
  return {
          firstName: "Anonymous",
          id: id,
          lastName: "Player",
          matchCount: 0,
          rating: 0,
          type_: /* Missing */2
        };
}

function getMaybe(playerMap, id) {
  if (Data_Id$Coronate.isDummy(id)) {
    return dummy;
  } else {
    return Belt_Map.getWithDefault(playerMap, id, makeMissing(id));
  }
}

export {
  Type ,
  NatInt ,
  fullName ,
  compareName ,
  succMatchCount ,
  predMatchCount ,
  setRating ,
  encode$1 as encode,
  decode$1 as decode,
  dummy ,
  getMaybe ,
}
/* Data_Id-Coronate Not a pure module */
