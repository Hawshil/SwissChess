// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Db$Coronate from "../src/Db.bs.js";
import * as Data_Id$Coronate from "../src/Data/Data_Id.bs.js";
import * as TestData$Coronate from "../src/testdata/TestData.bs.js";
import * as Dom from "@testing-library/dom";
import * as PagePlayers$Coronate from "../src/PagePlayers.bs.js";
import * as React$1 from "@testing-library/react";

require("@testing-library/jest-dom");

function PagePlayers_test$Profile(Props) {
  var id = Props.id;
  var match = Db$Coronate.useAllPlayers(undefined);
  var players = match.items;
  var match$1 = Db$Coronate.useConfig(undefined);
  var player = Belt_Map.get(players, id);
  if (player !== undefined) {
    return React.createElement(PagePlayers$Coronate.Profile.make, {
                player: player,
                players: players,
                playersDispatch: match.dispatch,
                config: match$1[0],
                configDispatch: match$1[1]
              });
  } else {
    return null;
  }
}

describe("The avoid form works", (function () {
        test("Adding a player to avoid works", (function () {
                var page = React$1.render(React.createElement(PagePlayers_test$Profile, {
                          id: TestData$Coronate.newbieMcNewberson.id
                        }));
                Dom.fireEvent.change(page.getByLabelText(({
                            NAME: "RegExp",
                            VAL: /Select a new player to avoid/i
                          }).VAL), {
                      target: {
                        value: TestData$Coronate.grandyMcMaster
                      }
                    });
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^add$/i
                          }).VAL));
                expect(page.getByText(({
                              NAME: "RegExp",
                              VAL: /grandy mcmaster/i
                            }).VAL)).toBeInTheDocument();
              }));
        test("Pathologic: avoiding all players works as expected.", (function () {
                var page = React$1.render(React.createElement(PagePlayers_test$Profile, {
                          id: TestData$Coronate.newbieMcNewberson.id
                        }));
                for(var _for = 1 ,_for_finish = Belt_Map.size(TestData$Coronate.players); _for < _for_finish; ++_for){
                  Dom.fireEvent.click(page.getByText(({
                              NAME: "RegExp",
                              VAL: /^add$/i
                            }).VAL));
                }
                expect(page.getByText(({
                              NAME: "RegExp",
                              VAL: /No players are available to avoid/i
                            }).VAL)).toBeInTheDocument();
                Dom.fireEvent.click(page.getByLabelText(({
                            NAME: "RegExp",
                            VAL: /remove tom servo from avoid list/i
                          }).VAL));
                expect(page.getByLabelText(({
                              NAME: "RegExp",
                              VAL: /Select a new player to avoid/i
                            }).VAL)).toHaveValue(({
                        NAME: "Str",
                        VAL: Data_Id$Coronate.toString(TestData$Coronate.tomServo.id)
                      }).VAL);
              }));
      }));

describe("The add player form works", (function () {
        var PagePlayers_test = function (Props) {
          var match = Db$Coronate.useAllPlayers(undefined);
          return React.createElement(PagePlayers$Coronate.NewPlayerForm.make, {
                      dispatch: match.dispatch
                    });
        };
        test("Changing the rating works", (function () {
                var page = React$1.render(React.createElement(PagePlayers_test, {}));
                Dom.fireEvent.change(page.getByLabelText(({
                            NAME: "RegExp",
                            VAL: /rating/i
                          }).VAL), {
                      target: {
                        value: "77"
                      }
                    });
                expect(page.getByLabelText(({
                              NAME: "RegExp",
                              VAL: /rating/i
                            }).VAL)).toHaveValue(77);
              }));
        test.skip("Check the rest of the fields", (function () {
                expect(true).toBe(true);
              }));
      }));

export {
  
}
/*  Not a pure module */
