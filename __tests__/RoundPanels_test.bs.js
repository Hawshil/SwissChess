// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as TestData$Coronate from "../src/testdata/TestData.bs.js";
import * as PageRound$Coronate from "../src/PageTournament/PageRound.bs.js";
import * as Data_Match$Coronate from "../src/Data/Data_Match.bs.js";
import * as Dom from "@testing-library/dom";
import * as React$1 from "@testing-library/react";
import * as LoadTournament$Coronate from "../src/PageTournament/LoadTournament.bs.js";

require("@testing-library/jest-dom");

describe("Tabs auto-change correctly.", (function () {
        test("When no players are matched, it defaults to the pair-picker", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 1,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.simplePairing.id
                        }));
                var selectTab = page.getByText(({
                        NAME: "RegExp",
                        VAL: /unmatched players \(/i
                      }).VAL);
                expect(selectTab).toHaveAttribute("aria-selected", "true");
              }));
        test("Tab doesn't change focus if there are still players to be matched.", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 1,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.simplePairing.id
                        }));
                var selectTab = page.getByText(({
                        NAME: "RegExp",
                        VAL: /unmatched players \(/i
                      }).VAL);
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add crow t robot/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add tom servo/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^match selected$/i
                          }).VAL));
                expect(selectTab).toHaveAttribute("aria-selected", "true");
              }));
        test("The tab selection doesn't change if there are still matched players", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 1,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.simplePairing.id
                        }));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add crow t robot/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add tom servo/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^match selected$/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add joel robinson/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add clayton forrester/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^match selected$/i
                          }).VAL));
                var matchesTab = page.getByText(({
                        NAME: "RegExp",
                        VAL: /^matches$/i
                      }).VAL);
                Dom.fireEvent.click(matchesTab);
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /edit match for joel robinson versus clayton forrester/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^unmatch$/i
                          }).VAL));
                expect(matchesTab).toHaveAttribute("aria-selected", "true");
              }));
        test("The tab selection changes when all players have been unmatched", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 1,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.simplePairing.id
                        }));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add crow t robot/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /add tom servo/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^match selected$/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /edit match for crow t robot versus tom servo/i
                          }).VAL));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^unmatch$/i
                          }).VAL));
                expect(page.getByText(({
                              NAME: "RegExp",
                              VAL: /Matches/i
                            }).VAL)).toHaveAttribute("aria-selected", "false");
              }));
        test("The tab selection changes when all players have been paired", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 1,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.simplePairing.id
                        }));
                Dom.fireEvent.click(page.getByText(({
                            NAME: "RegExp",
                            VAL: /^auto-pair unmatched players$/i
                          }).VAL));
                expect(page.getByText(({
                              NAME: "RegExp",
                              VAL: /^Unmatched players/i
                            }).VAL)).toHaveAttribute("aria-selected", "false");
              }));
      }));

test("Matches with deleted players don't crash when edited.", (function () {
        var page = function (param) {
          Dom.fireEvent.change(React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 0,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.deletedPlayerTourney.id
                        })).getByTestId("match-1-select"), {
                target: {
                  value: Data_Match$Coronate.Result.toString(/* BlackWon */1)
                }
              });
        };
        expect(page).not.toThrow();
      }));

export {
  
}
/*  Not a pure module */
