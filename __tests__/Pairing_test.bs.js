// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Belt_Set from "rescript/lib/es6/belt_Set.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Data_Id$Coronate from "../src/Data/Data_Id.bs.js";
import * as TestData$Coronate from "../src/testdata/TestData.bs.js";
import * as PageRound$Coronate from "../src/PageTournament/PageRound.bs.js";
import * as Data_Match$Coronate from "../src/Data/Data_Match.bs.js";
import * as Dom from "@testing-library/dom";
import * as Data_Pairing$Coronate from "../src/Data/Data_Pairing.bs.js";
import * as Data_Scoring$Coronate from "../src/Data/Data_Scoring.bs.js";
import * as React$1 from "@testing-library/react";
import * as LoadTournament$Coronate from "../src/PageTournament/LoadTournament.bs.js";
import * as PageTourneyPlayers$Coronate from "../src/PageTournament/PageTourneyPlayers.bs.js";

function loadPairData(tourney) {
  var playerIds = tourney.playerIds;
  var players = Belt_Map.reduce(TestData$Coronate.players, Belt_Map.make(Data_Id$Coronate.id), (function (acc, key, player) {
          if (Belt_Set.has(playerIds, key)) {
            return Belt_Map.set(acc, key, player);
          } else {
            return acc;
          }
        }));
  return Data_Pairing$Coronate.make(Data_Scoring$Coronate.fromTournament(tourney.roundList, tourney.scoreAdjustments), players, TestData$Coronate.config.avoidPairs);
}

test("Players have 0 priority of pairing themselves.", (function () {
        var data = loadPairData(TestData$Coronate.byeRoundTourney);
        var newb = TestData$Coronate.newbieMcNewberson.id;
        expect(Data_Pairing$Coronate.calcPairIdealByIds(data, newb, newb)).toBe(0.0);
      }));

describe("The lowest-ranking player is automatically picked for byes.", (function () {
        var dataPreBye = loadPairData(TestData$Coronate.byeRoundTourney);
        var match = Data_Pairing$Coronate.setByePlayer([], Data_Id$Coronate.dummy, dataPreBye);
        var byedPlayer = match[1];
        var pairData = match[0];
        test("The lowest-ranking player is removed after bye selection.", (function () {
                expect(Belt_Map.keysToArray(Data_Pairing$Coronate.players(pairData))).not.toContain(TestData$Coronate.newbieMcNewberson.id);
              }));
        test("The lowest-ranking player is returned", (function () {
                if (byedPlayer !== undefined) {
                  expect(Data_Pairing$Coronate.id(Caml_option.valFromOption(byedPlayer))).toBe(TestData$Coronate.newbieMcNewberson.id);
                  return ;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "Pairing_test.res",
                        50,
                        14
                      ],
                      Error: new Error()
                    };
              }));
      }));

test("The bye signup queue works", (function () {
        var dataPreBye = loadPairData(TestData$Coronate.byeRoundTourney2);
        var byeQueue = [
          TestData$Coronate.newbieMcNewberson.id,
          TestData$Coronate.joelRobinson.id
        ];
        var match = Data_Pairing$Coronate.setByePlayer(byeQueue, Data_Id$Coronate.dummy, dataPreBye);
        var byedPlayer = match[1];
        if (byedPlayer !== undefined) {
          expect(Data_Pairing$Coronate.id(Caml_option.valFromOption(byedPlayer))).toBe(TestData$Coronate.joelRobinson.id);
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Pairing_test.res",
                62,
                12
              ],
              Error: new Error()
            };
      }));

test("If all player have (impossibly) played a bye round, the lowest-rated player is picked", (function () {
        var dataPreBye = loadPairData(TestData$Coronate.byeRoundTourney3);
        var match = Data_Pairing$Coronate.setByePlayer([], Data_Id$Coronate.dummy, dataPreBye);
        var byedPlayer = match[1];
        if (byedPlayer !== undefined) {
          expect(Data_Pairing$Coronate.id(Caml_option.valFromOption(byedPlayer))).toBe(TestData$Coronate.newbieMcNewberson.id);
          return ;
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Pairing_test.res",
                72,
                14
              ],
              Error: new Error()
            };
      }));

test("Players are paired correctly in a simple scenario.", (function () {
        var pairData = loadPairData(TestData$Coronate.simplePairing);
        var matches = Data_Pairing$Coronate.pairPlayers(pairData);
        expect(matches).toEqual([
              [
                TestData$Coronate.grandyMcMaster.id,
                TestData$Coronate.gypsy.id
              ],
              [
                TestData$Coronate.drClaytonForrester.id,
                TestData$Coronate.newbieMcNewberson.id
              ],
              [
                TestData$Coronate.joelRobinson.id,
                TestData$Coronate.crowTRobot.id
              ],
              [
                TestData$Coronate.tomServo.id,
                TestData$Coronate.tvsFrank.id
              ]
            ]);
      }));

test("Players are paired correctly after a draw.", (function () {
        var pairData = loadPairData(TestData$Coronate.pairingWithDraws);
        var matches = Data_Pairing$Coronate.pairPlayers(pairData);
        expect(matches).toEqual([
              [
                TestData$Coronate.grandyMcMaster.id,
                TestData$Coronate.gypsy.id
              ],
              [
                TestData$Coronate.drClaytonForrester.id,
                TestData$Coronate.newbieMcNewberson.id
              ],
              [
                TestData$Coronate.tomServo.id,
                TestData$Coronate.tvsFrank.id
              ],
              [
                TestData$Coronate.joelRobinson.id,
                TestData$Coronate.crowTRobot.id
              ]
            ]);
      }));

require("@testing-library/jest-dom");

test("Players are paired correctly after a draw (more complex).", (function () {
        var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (tournament) {
                      return React.createElement(PageRound$Coronate.make, {
                                  roundId: 4,
                                  tournament: tournament
                                });
                    }),
                  tourneyId: Data_Id$Coronate.fromString("complex-bye-rounds---")
                }));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /auto-pair unmatched players/i
                  }).VAL));
        expect(page).toMatchSnapshot();
      }));

test("Auto-matching with bye players works", (function () {
        var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (tournament) {
                      return React.createElement(PageRound$Coronate.make, {
                                  roundId: 0,
                                  tournament: tournament
                                });
                    }),
                  tourneyId: TestData$Coronate.byeRoundTourney.id
                }));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /auto-pair unmatched players/i
                  }).VAL));
        expect(page.getByTestId("match-3-black")).toHaveTextContent("[Bye]");
      }));

test("Auto-matching works with manually adjusted scores", (function () {
        var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (tournament) {
                      return React.createElement(React.Fragment, undefined, React.createElement(PageTourneyPlayers$Coronate.make, {
                                      tournament: tournament
                                    }), React.createElement(PageRound$Coronate.make, {
                                      roundId: 3,
                                      tournament: tournament
                                    }));
                    }),
                  tourneyId: TestData$Coronate.scoreTest.id
                }));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /more options for kinga forrester/i
                  }).VAL));
        Dom.fireEvent.change(page.getByLabelText(({
                    NAME: "RegExp",
                    VAL: /score adjustment/i
                  }).VAL), {
              target: {
                value: "3"
              }
            });
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /save/i
                  }).VAL));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /more options for TV's Max/i
                  }).VAL));
        Dom.fireEvent.change(page.getByLabelText(({
                    NAME: "RegExp",
                    VAL: /score adjustment/i
                  }).VAL), {
              target: {
                value: "-3"
              }
            });
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /save/i
                  }).VAL));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /auto-pair unmatched players/i
                  }).VAL));
        expect(page.getByTestId("match-0-white")).toHaveTextContent("Bobo Professor");
      }));

describe("Manually pairing and byes.", (function () {
        test("Pairing players does not automatically pre-select the winner.", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 0,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.byeRoundTourney.id
                        }));
                Dom.fireEvent.click(page.getByText("Add Joel Robinson"));
                Dom.fireEvent.click(page.getByText("Add Tom Servo"));
                expect(page.getByTestId("pairpicker-preselect-winner")).toHaveValue(({
                        NAME: "Str",
                        VAL: Data_Match$Coronate.Result.toString(/* NotSet */6)
                      }).VAL);
              }));
        test("Pairing with a bye player automatically pre-selects the winner.", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 0,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.byeRoundTourney.id
                        }));
                Dom.fireEvent.click(page.getByText("Add [Bye]"));
                Dom.fireEvent.click(page.getByText("Add Joel Robinson"));
                expect(page.getByTestId("pairpicker-preselect-winner")).toHaveValue(({
                        NAME: "Str",
                        VAL: Data_Match$Coronate.Result.toString(/* BlackWon */1)
                      }).VAL);
              }));
        test("Un-pairing a bye player automatically un-pre-selects the winner.", (function () {
                var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                          children: (function (tournament) {
                              return React.createElement(PageRound$Coronate.make, {
                                          roundId: 0,
                                          tournament: tournament
                                        });
                            }),
                          tourneyId: TestData$Coronate.byeRoundTourney.id
                        }));
                Dom.fireEvent.click(page.getByText("Add [Bye]"));
                Dom.fireEvent.click(page.getByText("Add Joel Robinson"));
                Dom.fireEvent.click(page.getByText("Remove [Bye]"));
                expect(page.getByTestId("pairpicker-preselect-winner")).toHaveValue(({
                        NAME: "Str",
                        VAL: Data_Match$Coronate.Result.toString(/* NotSet */6)
                      }).VAL);
              }));
      }));

export {
  
}
/*  Not a pure module */
