// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as TestData$Coronate from "../src/testdata/TestData.bs.js";
import * as PageRound$Coronate from "../src/PageTournament/PageRound.bs.js";
import * as Data_Match$Coronate from "../src/Data/Data_Match.bs.js";
import * as Dom from "@testing-library/dom";
import * as Data_Player$Coronate from "../src/Data/Data_Player.bs.js";
import * as Data_Ratings$Coronate from "../src/Data/Data_Ratings.bs.js";
import * as React$1 from "@testing-library/react";
import * as LoadTournament$Coronate from "../src/PageTournament/LoadTournament.bs.js";
import * as PageTourneyScores$Coronate from "../src/PageTournament/PageTourneyScores.bs.js";
import * as PageTourneyPlayers$Coronate from "../src/PageTournament/PageTourneyPlayers.bs.js";

require("@testing-library/jest-dom");

test("K Factor is calculated correctly", (function () {
        var masterKFactor = Data_Ratings$Coronate.EloRank.getKFactor(TestData$Coronate.grandyMcMaster.matchCount, TestData$Coronate.grandyMcMaster.rating);
        expect(masterKFactor).toBe(10);
      }));

test("Ratings are calculated correctly", (function () {
        var partial_arg = TestData$Coronate.grandyMcMaster.matchCount;
        var partial_arg$1 = TestData$Coronate.newbieMcNewberson.matchCount;
        var partial_arg$2 = TestData$Coronate.grandyMcMaster.rating;
        var partial_arg$3 = TestData$Coronate.newbieMcNewberson.rating;
        var calcRatingsForPair = function (param) {
          return Data_Ratings$Coronate.calcNewRatings(partial_arg$3, partial_arg$2, partial_arg$1, partial_arg, param);
        };
        var newbWon = Curry._1(calcRatingsForPair, /* WhiteWon */0);
        var masterWon = Curry._1(calcRatingsForPair, /* BlackWon */1);
        var draw = Curry._1(calcRatingsForPair, /* Draw */2);
        expect(newbWon).toEqual([
              840,
              2590
            ]);
        expect(masterWon).toEqual([
              800,
              2600
            ]);
        expect(draw).toEqual([
              820,
              2595
            ]);
      }));

test("Ratings never go below 100", (function () {
        var match = Data_Ratings$Coronate.calcNewRatings(100, 100, Data_Player$Coronate.NatInt.fromInt(69), Data_Player$Coronate.NatInt.fromInt(69), /* BlackWon */1);
        expect(match[0]).toBe(100);
      }));

test.skip("Tie break scores calculate correctly", (function () {
        expect(true).toBe(true);
      }));

function scorePage(id) {
  return React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (param) {
                      var tourney = param.tourney;
                      return React.createElement(PageTourneyScores$Coronate.ScoreTable.make, {
                                  size: /* Expanded */1,
                                  tourney: tourney,
                                  getPlayer: param.getPlayer,
                                  title: tourney.name
                                });
                    }),
                  tourneyId: id
                }));
}

test("Snapshot of score table, score test", (function () {
        expect(scorePage(TestData$Coronate.scoreTest.id)).toMatchSnapshot();
      }));

test("Snapshot of score table, simple pairing", (function () {
        expect(scorePage(TestData$Coronate.simplePairing.id)).toMatchSnapshot();
      }));

test("Snapshot of ranks are correct", (function () {
        var page = scorePage(TestData$Coronate.scoreTest.id);
        expect(page.getByTestId("rank-1.0")).toHaveTextContent("TV's Max");
        expect(page.getByTestId("rank-2.0")).toHaveTextContent("Bobo Professor");
        expect(page.getByTestId("rank-3.0")).toHaveTextContent("TV's Frank");
        expect(page.getByTestId("rank-4.0")).toHaveTextContent("Mike Nelson");
        expect(page.getByTestId("rank-5.0")).toHaveTextContent("Brain Guy");
        expect(page.getByTestId("rank-6.0")).toHaveTextContent("Clayton Forrester");
        expect(page.getByTestId("rank-7.0")).toHaveTextContent("Joel Robinson");
        expect(page.getByTestId("rank-8.0")).toHaveTextContent("Crow T Robot");
        expect(page.getByTestId("rank-9.0")).toHaveTextContent("Cambot");
        expect(page.getByTestId("rank-10.0")).toHaveTextContent("Jonah Heston");
        expect(page.getByTestId("rank-11.0")).toHaveTextContent("Tom Servo");
        expect(page.getByTestId("rank-12.0")).toHaveTextContent("Pearl Forrester");
        expect(page.getByTestId("rank-13.0")).toHaveTextContent("Kinga Forrester");
      }));

test("Manually adjusting scores works", (function () {
        var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (tournament) {
                      return React.createElement(React.Fragment, undefined, React.createElement(PageTourneyPlayers$Coronate.make, {
                                      tournament: tournament
                                    }), React.createElement(PageTourneyScores$Coronate.make, {
                                      tournament: tournament
                                    }));
                    }),
                  tourneyId: TestData$Coronate.scoreTest.id
                }));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /more options for kinga forrester/i
                  }).VAL));
        Dom.fireEvent.change(page.getByLabelText(({
                    NAME: "RegExp",
                    VAL: /score adjustment/i
                  }).VAL), {
              target: {
                value: "100"
              }
            });
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /save/i
                  }).VAL));
        expect(page.getByTestId("rank-1.0")).toHaveTextContent("Kinga Forrester");
      }));

test("Pairing players twice displays the correct history", (function () {
        var page = React$1.render(React.createElement(LoadTournament$Coronate.make, {
                  children: (function (tournament) {
                      return React.createElement(PageRound$Coronate.make, {
                                  roundId: 1,
                                  tournament: tournament
                                });
                    }),
                  tourneyId: TestData$Coronate.simplePairing.id
                }));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /add crow t robot/i
                  }).VAL));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /add grandy mcmaster/i
                  }).VAL));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /match selected/i
                  }).VAL));
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /^Matches$/
                  }).VAL));
        Dom.fireEvent.change(page.getByDisplayValue("Select winner"), {
              target: {
                value: Data_Match$Coronate.Result.toString(/* BlackWon */1)
              }
            });
        Dom.fireEvent.click(page.getByText(({
                    NAME: "RegExp",
                    VAL: /View information for match: Crow T Robot versus Grandy McMaster/i
                  }).VAL));
        expect(page.queryAllByText(({
                      NAME: "RegExp",
                      VAL: /Crow T Robot - Won/i
                    }).VAL).length).toBe(2);
      }));

export {
  
}
/*  Not a pure module */
